#!/bin/bash

#> [ns]=jenkins

kubectl create ns $NS --dry-run=client -o yaml | kubectl apply -f -

cat << EOF | kubectl apply -n $NS -f -
apiVersion: v1
kind: ServiceAccount
metadata:
  name: jenkins-admin
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: jenkins
  labels:
    "app.kubernetes.io/name": 'jenkins'
rules:
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["create","delete","get","list","patch","update","watch"]
- apiGroups: [""]
  resources: ["pods/exec"]
  verbs: ["create","delete","get","list","patch","update","watch"]
- apiGroups: [""]
  resources: ["pods/log"]
  verbs: ["get","list","watch"]
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["get"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: jenkins-role-binding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: jenkins
subjects:
- kind: ServiceAccount
  name: jenkins-admin
EOF

cat << EOF | kubectl apply -n $NS -f -
apiVersion: v1
kind: Secret
metadata:
  name: sa-token-secret
  annotations:
    kubernetes.io/service-account.name: jenkins-admin
type: kubernetes.io/service-account-token
EOF

cat<<EOF | kubectl apply -n $NS -f -
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: jenkins-pv-claim
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 50Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: jenkins-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: jenkins
  template:
    metadata:
      labels:
        app: jenkins
    spec:
      serviceAccountName: jenkins-admin
      securityContext:
            fsGroup: 1000
            runAsUser: 1000
      containers:
        - name: jenkins
          image: jenkins/jenkins:lts
          resources:
            limits:
              memory: "2Gi"
              cpu: "1000m"
            requests:
              memory: "500Mi"
              cpu: "500m"
          ports:
            - name: httpport
              containerPort: 8080
            - name: jnlpport
              containerPort: 50000
          livenessProbe:
            httpGet:
              path: "/login"
              port: 8080
            initialDelaySeconds: 90
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 5
          readinessProbe:
            httpGet:
              path: "/login"
              port: 8080
            initialDelaySeconds: 60
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
          volumeMounts:
            - name: jenkins-data
              mountPath: /var/jenkins_home
      volumes:
        - name: jenkins-data
          persistentVolumeClaim:
              claimName: jenkins-pv-claim
---
apiVersion: v1
kind: Service
metadata:
  name: jenkins-service
  annotations:
      prometheus.io/scrape: 'true'
      prometheus.io/path:   /
      prometheus.io/port:   '8080'
spec:
  selector:
    app: jenkins
  type: NodePort
  ports:
    - name: httpport
      port: 8080
      targetPort: 8080
      nodePort: 32000
    - name: jnlpport
      port: 50000
      targetPort: 50000
EOF

cat<<EOF | kubectl apply -n $NS -f -
apiVersion: v1
kind: Pod
metadata:
  name: agent-0
spec:
  containers:
  - name: agent-0
    image: ubuntu:24.04
    securityContext:
      privileged: true
    command: ["/bin/bash", "-c"]
    args: ["/bin/setup-script.sh"]
    volumeMounts:
    - name: setup-volume
      mountPath: /bin/setup-script.sh
      readOnly: true
      subPath: setup-script.sh
  volumes:
  - name: setup-volume
    configMap:
      defaultMode: 0700
      name: setup-configmap
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: setup-configmap
data:
  setup-script.sh: |-
    #!/bin/bash
    apt update
    apt install -y --no-install-recommends openjdk-17-jdk-headless
    mkdir -p /root/.ssh
    ssh-keyscan -t ed25519 github.com >> /root/.ssh/known_hosts
    apt install docker.io maven -y
    curl -LO https://dl.k8s.io/release/v1.32.0/bin/linux/amd64/kubectl
    chmod +x kubectl
    mv kubectl /usr/local/bin
    systemctl enable docker --now
    echo "done" > /root/.done

    sleep infinity
EOF
